library("datasets")
library(datasets)
data = PimaIndiansDiabetes
data(PimaIndiansDiabetes)
install.packages("mlbench", dependencies = T)
library(mlbench)
library("mlbench")
install.packages("mlbench", dependencies = T)
library("mlbench")
data = PimaIndiansDiabetes
data("PimaIndiansDiabetes")
data = data("PimaIndiansDiabetes")
rm(data)
?rename
install.packages("reshape")
install.packages("reshape")
library("reshape")
rename(PimaIndiansDiabetes, "data")
?rename
rename(PimaIndiansDiabetes, c("data"))
View(PimaIndiansDiabetes)
data("PimaIndiansDiabetes")
data = data(PimaIndiansDiabetes)
data = PimaIndiansDiabetes
head(data)
?lapply
?apply
apply(data[1:9,], function(x) sum(is.na(x)))
apply(data[1:9,], sum(is.na(x)))
sum(is.na(data[1:,]))
head(data[1,])
head(data[,1])
head(data)
apply(data[,1:9], sum(is.na(x)))
sum(is.na(data[,1]))
apply(data[,], function(x) sum(is.na(x)))
apply(data, 2, sum(is.na(x)))
apply(data, 2, sum(is.na()))
apply(data, 2, function(x) sum(is.na(x)))
sum(is.na(data[,1]))
sum(is.na(data[,2]))
sum(is.na(data[,3]))
sum(is.na(data[,4]))
sum(is.na(data[,5]))
sum(is.na(data[,6]))
sum(is.na(data[,7]))
sum(is.na(data[,8]))
sum(is.na(data[,9]))
head(data)
head(data)
?PimaIndiansDiabetes
mean(data$pregnant)
median(data$pregnant)
plot(data$diabetes)
cor(data)
cor(as.matrix(data))
sum(data$diabetes == "neg")
sum(data$diabetes == "pos")
sum(data$diabetes == "neg")
library(glmnet)
linear = lm(diabetes ~., data)
head(data)
head(data)
levels(data$diabetes)
?glm
linear = lm(diabetes ~., data)
typeof(data$pregnant)
typeof(data$diabetes)
?ifelse
data$diabetes = ifelse(data$diabetes == "pos", 1, 0)
head(data)
sum(data$diabetes == "0") # 500 obs
sum(data$diabetes == 1) # 268 obs
linear = lm(diabetes ~., data)
set.seed(415)
index = sample(1:nrow(data), round(0.8*nrow(data)))
train = data[index,]
test = data[-index,]
linear = lm(diabetes ~., train)
pred_linear = predict(linear, test)
pred_linear
predict
?predict
pred_linear = predict(linear, test, type = "response")
pred_linear
pred_linear = ifelse(predict(linear, test, type = "response") >= 0.5, 1, 0)
pred_linear
table(train$diabetes, pred_linear)
length(train$diabetes)
length(pred_linear)
table(test$diabetes, pred_linear)
table(test$diabetes, pred_linear, dnn = c("No diabetes", "diabetes"))
table(test$diabetes, pred_linear, dnn = c("No Diabetes", "Diabetes"))
(87+31)/(nrow(pred_linear))
nrow(pred_linear)
(87+31)/(length(pred_linear))
?train
library(caret)
install.packages("caret", dependencies = T)
library(caret)
?train
cforest.obj = train(diabetes ~ .,                 # model formula (. means all features)
data = train,            # data.frame containing training set
method = "lm",     # model to use
trControl = trControl # set training settings
)     # set grid of params to test over
cv_linear = cv.glm(train, linear, 10)
install.packages("boot", dependencies = T)
install.packages("boot", dependencies = T)
library(boot)
cv_linear = cv.glm(train, linear, 10)
cforest.obj = train(diabetes~., data = train, method = "lm", trControl = ctrl, metric=”Rsquared”)
cv.linear = train(diabetes~., data = train, method = "lm", trControl = ctrl, metric=”Rsquared”)
cv.linear = train(diabetes~., data = train, method = "lm", trControl = lm_ctrl, metric=”Rsquared”)
cv.linear = train(diabetes~., data = train, method = "lm", trControl = lm_ctrl)
lm_ctrl = trainControl(method = "cv", number = 10)
cv.linear = train(diabetes~., data = train, method = "lm", trControl = lm_ctrl)
pred_cv.linear = ifelse(predict(cv.linear, test, type = "response") >= 0.5, 1, 0)
pred_cv.linear = ifelse(predict(cv.linear, test) >= 0.5, 1, 0)
table(test$diabetes, pred_cv.linear, dnn = c("No Diabetes", "Diabetes"))
library(randomForest)
data_y = data[,9]
head(data_y)
head(data)
train_y = train[,9]
train_x = train[,-9]
rm(data_y)
rForest = randomForest(diabetes ~ ., data = train)
pred_rf = ifelse(predict(rForest, test) >= 0.5, 1, 0)
table(test$diabetes, pred_rf, dnn = c("No Diabetes", "Diabetes"))
(87+35)/(length(test))
length(test)
(87+35)/(length(pred_rf))
library(neuralnet)
install.packages("neuralnet", dependencies = T
)
library(neuralnet)
maxs = apply(data, 2, max)
mins = apply(data, 2, min)
max
maxs
mins
scaled = as.data.frame(scale(data, center = mins, scale = maxs - mins))
train1 = scaled[index,]
rm(train1)
train_scaled = scaled[index,]
test_scaled = scaled[-index,]
n = names(train_scaled)
f = as.formula(paste("diabetes ~", paste(n[!n %in% "diabetes"], collapse = " + ")))
f
(2/3)*9
?neuralnet
nn = neuralnet(f, data = train_scaled, hidden = 6, linear.output = F)
pr.nn = compute(nn, test_scaled[,1:8])
head(pr.nn)
rm(pr.nn)
pred_nn = ifelse(compute(nn, test_scaled[,1:8]) >= 0.5, 1, 0)
?compute
pred_nn = compute(nn, test_scaled[,1:8]
pr.nn1 = pr.nn$net.result*(max(data$medv) - min(data$medv)) + min(data$medv)
pred_nn_unscaled = compute(nn, test_scaled[,1:8]
pr.nn1 = pr.nn$net.result*(max(data$medv) - min(data$medv)) + min(data$medv)
pred_nn_unscaled = compute(nn, test_scaled[,1:8])
pred_nn_prob = pred_nn$net.result*(max(data$diabetes) - min(data$diabetes)) + min(data$diabetes)
pred_nn_prob = pred_nn_unscaled$net.result*(max(data$diabetes) - min(data$diabetes)) + min(data$diabetes)
head(pred_nn_prob)
pred_nn_prob = ifelse(pred_nn_unscaled$net.result*(max(data$diabetes) - min(data$diabetes)) + min(data$diabetes) >= 0.5, 1, 0)
head(pred_nn_prob)
table(test$diabetes, pred_nn_prob, dnn = c("No Diabetes", "Diabetes"))
(80+34)/(length(pred_nn_prob))
plot(nn)
install.packages(nn)
install.packages("nnet", dependencies = T)
install.packages("nnet", dependencies = T)
